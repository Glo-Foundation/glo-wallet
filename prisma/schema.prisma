generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id        String   @id @default(uuid())
  address   String   @unique
  email     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ctas      CTAs[]
}

model CTAs {
  id          String   @id @default(uuid())
  isCompleted Boolean  @default(false)
  type        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User     @relation(fields: [userId], references: [id])
  userId      String
}

model IdrissInvite {
  address   String   @id @unique
}

enum Charity {
  EXTREME_POVERTY
  OPEN_SOURCE
  CLIMATE
  REFUGEE_CRISIS
  SAVE_LIVES
  ENDAOMENT
  RETRO_PG_OP
  CELO_PG
}

model CharityChoice {
  id          Int       @id @default(autoincrement())
  name        Charity
  address     String
  creationDate DateTime  @default(now())
  percent     Int
  choiceNum   Int
  sig String?
  sigMessage String?

  @@unique([address, choiceNum, name]) // Ensures a charity can only be chosen once per choiceNum and address
}

model BalanceOnDate {
  id            Int       @id @default(autoincrement())
  ts            DateTime  @updatedAt
  isProcessed   Boolean   @default(false)
  balancesData  Json?
  entries       BalanceCharity[]
}

model BalanceCharity {
  id            Int           @id @default(autoincrement())
  BalanceOnDate BalanceOnDate @relation(fields: [runId], references: [id])
  runId         Int
  address       String
  balancesData  Json?
  charityData    Json?
}

model FundingChoicesCache {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  choices   Json     // Stores funding choices as JSON
}

model CeloLiquidity {
  id          Int      @id @default(autoincrement())
  total       Int
  breakdown   Json    
  createdAt   DateTime @default(now())
}